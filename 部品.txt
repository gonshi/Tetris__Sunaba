マス目列を初期化する(マス目列){
	回数= 0;
	while ( 回数< 252 ){
		マス目列[回数] = 0;
		回数= 回数+ 1;
	}
	//左右の壁
	y = 0;
	while ( y < 21 ){
		マス目列[ ( y * 12 ) + 0 ] = 8;
		マス目列[ ( y * 12 ) + 11 ] = 8;
		y = y + 1;
	}
	//底
	y = 20;
	x = 0;
	while ( x < 12 ){
		マス目列[ ( y * 12 ) + x ] = 8;
		x = x + 1;
	}
}
 
マス目を描く( マス目x, マス目y, color){
 
	if(マス目y>-1){
		y = 0;
		画面= 60000; //画面に別名
		while ( y < 7 ){
			x = 0;
			while ( x < 7 ){
				画面x = x + ( マス目x * 7 );
				画面y = y + ( マス目y * 7 );
				画面[ ( 画面y * 200 ) + 画面x ] = color;
				x = x + 1;
			}
			y = y + 1;
		}
	}
 
}
 
マス目列を描く(マス目列){
	画面= 60000;
	x=123;
	while(x<163){
		y=18;
		while(y<21){
			画面[ ( y * 200 ) + x ] = 999900;
			y=y+1;
		}
		x=x+1;
	}
 
	x=123;
	while(x<163){
		y=58;
		while(y<61){
			画面[ ( y * 200 ) + x ] = 999900;
			y=y+1;
		}
		x=x+1;
	}
 
	y=18;
	while(y<61){
		x=120;
		while(x<123){
			画面[ ( y * 200 ) + x ] = 999900;
			x=x+1;
		}
		y=y+1;
	}
 
	y=18;
	while(y<61){
		x=163;
		while(x<166){
			画面[ ( y * 200 ) + x ] = 999900;
			x=x+1;
		}
		y=y+1;
	}
 
	y = 0;
	while ( y < 21 ){
		x = 0;
		while ( x < 12 ){
			//色を決める。
			色= 0; //まずは黒
			if ( マス目列[ ( y * 12 ) + x ] == 1 ){
				色= 990939; 
			}
			if ( マス目列[ ( y * 12 ) + x ] == 2 ){
				色= 400769; 
			}
			if ( マス目列[ ( y * 12 ) + x ] == 3 ){
				色= 992020; 
			}
			if ( マス目列[ ( y * 12 ) + x ] == 4 ){
				色= 009900; 
			}
			if ( マス目列[ ( y * 12 ) + x ] == 5 ){
				色= 996000; 
			}
			if ( マス目列[ ( y * 12 ) + x ] == 6 ){
				色= 009999; 
			}
			if ( マス目列[ ( y * 12 ) + x ] == 7 ){
				色= 990099; 
			}
			if ( マス目列[ ( y * 12 ) + x ] == 8 ){
				色= 000099; //壁
			}
			マス目を描く(x,y,色);
			x = x + 1;
		}
		y = y + 1;
	}
}
 
移動を取る(){
	移動= 0;
	if ( memory[ 50015 ] != 0 ){
		移動= 移動- 1;
	}
	if ( memory[ 50016 ] != 0 ){
		移動= 移動+ 1;
	}移動= memory[ 50016 ] - memory[ 50015 ];
	return 移動;
}
 
ストックを描く( ストック){
	//一度全部黒にする
	x=19;
	while(x<23){
		y=4;
		while(y<7){
			マス目を描く( x, y, 000000 );
			y=y+1;
		}
		x=x+1;
	}
 
 
	if(ストック==1){
		マス目を描く( 20, 5, 999999 );
		マス目を描く( 20-1, 5, 999999 );
		マス目を描く( 20+1, 5, 999999 );
		マス目を描く( 20, 5-1, 999999 );
	}
	if(ストック==2){
		マス目を描く( 20, 5, 999999 );
		マス目を描く( 20, 5-1, 999999 );
		マス目を描く( 20+1, 5-1, 999999 );
		マス目を描く( 20+1, 5, 999999 );
	}
	if(ストック==3){
		マス目を描く( 20, 5, 999999 );
		マス目を描く( 20, 5-1, 999999 );
		マス目を描く( 20, 5+1, 999999 );
		マス目を描く( 20+1, 5-1, 999999 );
	}
	if(ストック==4){
		マス目を描く( 20, 5, 999999 );
		マス目を描く( 20, 5-1, 999999 );
		マス目を描く( 20, 5+1, 999999 );
		マス目を描く( 20-1, 5-1, 999999 );
	}
	if(ストック==5){
		マス目を描く( 20, 5, 999999 );
		マス目を描く( 20-1, 5, 999999 );
		マス目を描く( 20+1, 5, 999999 );
		マス目を描く( 20+2, 5, 999999 );
	}
	if(ストック==6){
		マス目を描く( 20, 5, 999999 );
		マス目を描く( 20-1, 5, 999999 );
		マス目を描く( 20+1, 5-1, 999999 );
		マス目を描く( 20, 5-1, 999999 );
	}
	if(ストック==7){
		マス目を描く( 20, 5, 999999 );
		マス目を描く( 20-1, 5-1, 999999 );
		マス目を描く( 20+1, 5, 999999 );
		マス目を描く( 20, 5-1, 999999 );
	}
}
 
描く( マス目列, ブロックx, ブロックy , ブロックの形 , ブロックの向き , color , ストック){
	マス目列を描く( マス目列);
	ストックを描く( ストック);
	if((ブロックの形==1) * (ブロックの向き==1)){
		マス目を描く( ブロックx, ブロックy , color );
		マス目を描く( ブロックx - 1, ブロックy, color );
		マス目を描く( ブロックx + 1, ブロックy, color );
		マス目を描く( ブロックx, ブロックy-1, color );
	}
	if((ブロックの形==1) * (ブロックの向き==2)){
		マス目を描く( ブロックx, ブロックy, color );
		マス目を描く( ブロックx, ブロックy + 1, color );
		マス目を描く( ブロックx + 1, ブロックy, color );
		マス目を描く( ブロックx, ブロックy-1, color );
	}
	if((ブロックの形==1) * (ブロックの向き==3)){
		マス目を描く( ブロックx, ブロックy, color );
		マス目を描く( ブロックx - 1, ブロックy, color );
		マス目を描く( ブロックx + 1, ブロックy, color );
		マス目を描く( ブロックx, ブロックy + 1, color );
	}
	if((ブロックの形==1) * (ブロックの向き==4)){
		マス目を描く( ブロックx, ブロックy, color );
		マス目を描く( ブロックx - 1, ブロックy, color );
		マス目を描く( ブロックx, ブロックy + 1, color );
		マス目を描く( ブロックx, ブロックy - 1, color );
	}
 
	if((ブロックの形==2) * (ブロックの向き==1)){
		マス目を描く( ブロックx, ブロックy, color );
		マス目を描く( ブロックx, ブロックy - 1, color );
		マス目を描く( ブロックx + 1, ブロックy - 1, color );
		マス目を描く( ブロックx + 1, ブロックy, color );
	}
	if((ブロックの形==2) * (ブロックの向き==2)){
		マス目を描く( ブロックx, ブロックy, color );
		マス目を描く( ブロックx, ブロックy - 1, color );
		マス目を描く( ブロックx + 1, ブロックy - 1, color );
		マス目を描く( ブロックx + 1, ブロックy, color );
	}
	if((ブロックの形==2) * (ブロックの向き==3)){
		マス目を描く( ブロックx, ブロックy, color );
		マス目を描く( ブロックx, ブロックy - 1, color );
		マス目を描く( ブロックx + 1, ブロックy - 1, color );
		マス目を描く( ブロックx + 1, ブロックy, color );
	}
	if((ブロックの形==2) * (ブロックの向き==4)){
		マス目を描く( ブロックx, ブロックy, color );
		マス目を描く( ブロックx, ブロックy - 1, color );
		マス目を描く( ブロックx + 1, ブロックy - 1, color );
		マス目を描く( ブロックx + 1, ブロックy, color );
	}
 
	if((ブロックの形==3) * (ブロックの向き==1)){
		マス目を描く( ブロックx, ブロックy, color );
		マス目を描く( ブロックx, ブロックy - 1, color );
		マス目を描く( ブロックx, ブロックy + 1, color );
		マス目を描く( ブロックx + 1, ブロックy - 1, color );
	}
	if((ブロックの形==3) * (ブロックの向き==2)){
		マス目を描く( ブロックx, ブロックy, color );
		マス目を描く( ブロックx + 1, ブロックy + 1, color );
		マス目を描く( ブロックx - 1, ブロックy, color );
		マス目を描く( ブロックx + 1, ブロックy, color );
	}
 
	if((ブロックの形==3) * (ブロックの向き==3)){
		マス目を描く( ブロックx, ブロックy, color );
		マス目を描く( ブロックx, ブロックy - 1, color );
		マス目を描く( ブロックx, ブロックy + 1, color );
		マス目を描く( ブロックx - 1, ブロックy + 1, color );
	}
	if((ブロックの形==3) * (ブロックの向き==4)){
		マス目を描く( ブロックx, ブロックy, color );
		マス目を描く( ブロックx - 1, ブロックy, color );
		マス目を描く( ブロックx + 1, ブロックy, color );
		マス目を描く( ブロックx - 1, ブロックy - 1, color );
	}
 
	if((ブロックの形==4) * (ブロックの向き==1)){
		マス目を描く( ブロックx, ブロックy,color );
		マス目を描く( ブロックx, ブロックy - 1, color );
		マス目を描く( ブロックx, ブロックy + 1, color );
		マス目を描く( ブロックx - 1, ブロックy - 1, color );
	}
	if((ブロックの形==4) * (ブロックの向き==2)){
		マス目を描く( ブロックx, ブロックy, color );
		マス目を描く( ブロックx - 1, ブロックy, color );
		マス目を描く( ブロックx + 1, ブロックy, color );
		マス目を描く( ブロックx + 1, ブロックy - 1, color );
	}
 
	if((ブロックの形==4) * (ブロックの向き==3)){
		マス目を描く( ブロックx, ブロックy, color );
		マス目を描く( ブロックx, ブロックy - 1, color );
		マス目を描く( ブロックx, ブロックy + 1, color );
		マス目を描く( ブロックx + 1, ブロックy + 1, color );
	}
	if((ブロックの形==4) * (ブロックの向き==4)){
		マス目を描く( ブロックx, ブロックy, color );
		マス目を描く( ブロックx - 1, ブロックy, color );
		マス目を描く( ブロックx + 1, ブロックy, color );
		マス目を描く( ブロックx - 1, ブロックy + 1, color );
	}
 
	if((ブロックの形==5) * (ブロックの向き==1)){
		マス目を描く( ブロックx, ブロックy, color );
		マス目を描く( ブロックx - 1, ブロックy, color );
		マス目を描く( ブロックx + 1, ブロックy, color );
		マス目を描く( ブロックx + 2, ブロックy, color );
	}
	if((ブロックの形==5) * (ブロックの向き==2)){
		マス目を描く( ブロックx, ブロックy - 1, color );
		マス目を描く( ブロックx, ブロックy, color );
		マス目を描く( ブロックx, ブロックy + 1, color );
		マス目を描く( ブロックx, ブロックy + 2, color );
	}
	if((ブロックの形==5) * (ブロックの向き==3)){
		マス目を描く( ブロックx, ブロックy, color );
		マス目を描く( ブロックx - 1, ブロックy, color );
		マス目を描く( ブロックx + 1, ブロックy, color );
		マス目を描く( ブロックx - 2, ブロックy, color );
	}
	if((ブロックの形==5) * (ブロックの向き==4)){
		マス目を描く( ブロックx, ブロックy - 1, color);
		マス目を描く( ブロックx, ブロックy, color );
		マス目を描く( ブロックx, ブロックy + 1, color );
		if(ブロックy > 1){
			マス目を描く( ブロックx, ブロックy - 2, color );
		}
	}
 
	if((ブロックの形==6) * (ブロックの向き==1)){
		マス目を描く( ブロックx, ブロックy - 1, color );
		マス目を描く( ブロックx, ブロックy, color );
		マス目を描く( ブロックx + 1, ブロックy - 1, color );
		マス目を描く( ブロックx - 1, ブロックy, color );
	}
	if((ブロックの形==6) * (ブロックの向き==2)){
		マス目を描く( ブロックx, ブロックy - 1, color );
		マス目を描く( ブロックx, ブロックy, color );
		マス目を描く( ブロックx + 1, ブロックy, color );
		マス目を描く( ブロックx + 1, ブロックy + 1, color );
	}
 
	if((ブロックの形==6) * (ブロックの向き==3)){
		マス目を描く( ブロックx, ブロックy + 1, color );
		マス目を描く( ブロックx, ブロックy, color );
		マス目を描く( ブロックx + 1, ブロックy, color );
		マス目を描く( ブロックx - 1, ブロックy + 1, color );
	}
	if((ブロックの形==6) * (ブロックの向き==4)){
		マス目を描く( ブロックx - 1, ブロックy, color );
		マス目を描く( ブロックx, ブロックy, color );
		マス目を描く( ブロックx - 1, ブロックy - 1, color );
		マス目を描く( ブロックx, ブロックy + 1, color );
	}
 
	if((ブロックの形==7) * (ブロックの向き==1)){
		マス目を描く( ブロックx - 1, ブロックy - 1, color );
		マス目を描く( ブロックx, ブロックy, color );
		マス目を描く( ブロックx, ブロックy - 1, color );
		マス目を描く( ブロックx + 1, ブロックy, color );
	}
	if((ブロックの形==7) * (ブロックの向き==2)){
		マス目を描く( ブロックx + 1, ブロックy - 1, color );
		マス目を描く( ブロックx, ブロックy, color );
		マス目を描く( ブロックx, ブロックy + 1, color );
		マス目を描く( ブロックx + 1, ブロックy, color );
	}
	if((ブロックの形==7) * (ブロックの向き==3)){
		マス目を描く( ブロックx - 1, ブロックy, color );
		マス目を描く( ブロックx, ブロックy, color );
		マス目を描く( ブロックx, ブロックy + 1, color );
		マス目を描く( ブロックx + 1, ブロックy + 1, color );
	}
	if((ブロックの形==7) * (ブロックの向き==4)){
		マス目を描く( ブロックx - 1, ブロックy, color );
		マス目を描く( ブロックx, ブロックy, color );
		マス目を描く( ブロックx, ブロックy - 1, color );
		マス目を描く( ブロックx - 1, ブロックy + 1, color );
	}
 
	memory[ 50005 ] = 1; //機械と通信
}
 
マス目を得る( マス目列, x, y , ブロックの形 , ブロックの向き){
	a=0;
	if((ブロックの形==1) * (ブロックの向き==1)){
		if(マス目列[ ( y * 12 ) + x ] != 0){
			a=1;
		}
		if(マス目列[ ( y * 12 ) + x - 1 ] != 0){
			a=1;
		}
		if(マス目列[ ( y * 12 ) + x + 1 ] != 0){
			a=1;
		}
		if( (y>0) * (マス目列[ ( (y-1) * 12 ) + x ] != 0)){
			a=1;
		}
	}
 
	if((ブロックの形==1) * (ブロックの向き==2)){
		if(マス目列[ ( y * 12 ) + x ] != 0){
			a=1;
		}
		if(マス目列[ ( (y+1) * 12 ) + x ] != 0){
			a=1;
		}
		if(マス目列[ ( y * 12 ) + x + 1 ] != 0){
			a=1;
		}
		if( (y>0) * (マス目列[ ( (y-1) * 12 ) + x ] != 0)){
			a=1;
		}
	}
 
	if((ブロックの形==1) * (ブロックの向き==3)){
		if(マス目列[ ( y * 12 ) + x ] != 0){
			a=1;
		}
		if(マス目列[ ( y * 12 ) + x - 1 ] != 0){
			a=1;
		}
		if(マス目列[ ( y * 12 ) + x + 1 ] != 0){
			a=1;
		}
		if(マス目列[ ( (y + 1 ) * 12 ) + x ] != 0){
			a=1;
		}
	}
 
	if((ブロックの形==1) * (ブロックの向き==4)){
		if(マス目列[ ( y * 12 ) + x ] != 0){
			a=1;
		}
		if(マス目列[ ( y * 12 ) + x - 1 ] != 0){
			a=1;
		}
		if(マス目列[ ( (y+1) * 12 ) + x ] != 0){
			a=1;
		}
		if( (y>0) * (マス目列[ ( (y-1) * 12 ) + x ] != 0)){
			a=1;
		}
	}
 
	if((ブロックの形==2) * (ブロックの向き==1)){
		if(マス目列[ ( y * 12 ) + x ] != 0){
			a=1;
		}
		if( (y>0) * (マス目列[ ( (y-1) * 12 ) + x ] != 0)){
			a=1;
		}
		if( (y>0) * (マス目列[ ( (y-1) * 12 ) + x + 1 ] != 0)){
			a=1;
		}
		if(マス目列[ ( y * 12 ) + x + 1] != 0){
			a=1;
		}
	}
	if((ブロックの形==2) * (ブロックの向き==2)){
		if(マス目列[ ( y * 12 ) + x ] != 0){
			a=1;
		}
		if( (y>0) * (マス目列[ ( (y-1) * 12 ) + x ] != 0)){
			a=1;
		}
		if( (y>0) * (マス目列[ ( (y-1) * 12 ) + x + 1 ] != 0)){
			a=1;
		}
		if(マス目列[ ( y * 12 ) + x + 1] != 0){
			a=1;
		}
	}
	if((ブロックの形==2) * (ブロックの向き==3)){
		if(マス目列[ ( y * 12 ) + x ] != 0){
			a=1;
		}
		if( (y>0) * (マス目列[ ( (y-1) * 12 ) + x ] != 0)){
			a=1;
		}
		if( (y>0) * (マス目列[ ( (y-1) * 12 ) + x + 1 ] != 0)){
			a=1;
		}
		if(マス目列[ ( y * 12 ) + x + 1] != 0){
			a=1;
		}
	}
	if((ブロックの形==2) * (ブロックの向き==4)){
		if(マス目列[ ( y * 12 ) + x ] != 0){
			a=1;
		}
		if( (y>0) * (マス目列[ ( (y-1) * 12 ) + x ] != 0)){
			a=1;
		}
		if( (y>0) * (マス目列[ ( (y-1) * 12 ) + x + 1 ] != 0)){
			a=1;
		}
		if(マス目列[ ( y * 12 ) + x + 1] != 0){
			a=1;
		}
	}
 
	if((ブロックの形==3) * (ブロックの向き==1)){
		if(マス目列[ ( y * 12 ) + x ] != 0){
			a=1;
		}
		if( (y>0) * (マス目列[ ( (y-1) * 12 ) + x ] != 0)){
			a=1;
		}
		if(マス目列[ ( (y+1) * 12 ) + x ] != 0){
			a=1;
		}
		if( (y>0) * (マス目列[ ( (y-1) * 12 ) + x + 1] != 0)){
			a=1;
		}
	}
	if((ブロックの形==3) * (ブロックの向き==2)){
		if(マス目列[ ( y * 12 ) + x ] != 0){
			a=1;
		}
		if(マス目列[ ( y * 12 ) + x - 1 ] != 0){
			a=1;
		}
		if(マス目列[ ( y * 12 ) + x + 1 ] != 0){
			a=1;
		}
		if( マス目列[ ( (y+1) * 12 ) + x + 1] != 0){
			a=1;
		}
	}
	if((ブロックの形==3) * (ブロックの向き==3)){
		if(マス目列[ ( y * 12 ) + x ] != 0){
			a=1;
		}
		if( (y>0) * (マス目列[ ( (y-1) * 12 ) + x ] != 0)){
			a=1;
		}
		if(マス目列[ ( (y+1) * 12 ) + x ] != 0){
			a=1;
		}
		if(マス目列[ ( (y+1) * 12 ) + x - 1] != 0){
			a=1;
		}
	}
	if((ブロックの形==3) * (ブロックの向き==4)){
		if(マス目列[ ( y * 12 ) + x ] != 0){
			a=1;
		}
		if(マス目列[ ( y * 12 ) + x - 1 ] != 0){
			a=1;
		}
		if(マス目列[ ( y * 12 ) + x + 1 ] != 0){
			a=1;
		}
		if(  (y>0) * (マス目列[ ( (y-1) * 12 ) + x - 1] != 0)){
			a=1;
		}
	}
 
	if((ブロックの形==4) * (ブロックの向き==1)){
		if(マス目列[ ( y * 12 ) + x ] != 0){
			a=1;
		}
		if( (y>0) * (マス目列[ ( (y-1) * 12 ) + x ] != 0)){
			a=1;
		}
		if(マス目列[ ( (y+1) * 12 ) + x ] != 0){
			a=1;
		}
		if( (y>0) * (マス目列[ ( (y-1) * 12 ) + x - 1] != 0)){
			a=1;
		}
	}
	if((ブロックの形==4) * (ブロックの向き==2)){
		if(マス目列[ ( y * 12 ) + x ] != 0){
			a=1;
		}
		if(マス目列[ ( y * 12 ) + x - 1 ] != 0){
			a=1;
		}
		if(マス目列[ ( y * 12 ) + x + 1 ] != 0){
			a=1;
		}
		if(  (y>0) * (マス目列[ ( (y-1) * 12 ) + x + 1] != 0)){
			a=1;
		}
	}
	if((ブロックの形==4) * (ブロックの向き==3)){
		if(マス目列[ ( y * 12 ) + x ] != 0){
			a=1;
		}
		if( (y>0) * (マス目列[ ( (y-1) * 12 ) + x ] != 0)){
			a=1;
		}
		if(マス目列[ ( (y+1) * 12 ) + x ] != 0){
			a=1;
		}
		if(マス目列[ ( (y+1) * 12 ) + x + 1] != 0){
			a=1;
		}
	}
	if((ブロックの形==4) * (ブロックの向き==4)){
		if(マス目列[ ( y * 12 ) + x ] != 0){
			a=1;
		}
		if(マス目列[ ( y * 12 ) + x - 1 ] != 0){
			a=1;
		}
		if(マス目列[ ( y * 12 ) + x + 1 ] != 0){
			a=1;
		}
		if(マス目列[ ( (y+1) * 12 ) + x - 1] != 0){
			a=1;
		}
	}
 
	if((ブロックの形==5) * (ブロックの向き==1)){
		if(マス目列[ ( y * 12 ) + x ] != 0){
			a=1;
		}
		if(マス目列[ ( y * 12 ) + x - 1 ] != 0){
			a=1;
		}
		if(マス目列[ ( y * 12 ) + x + 1 ] != 0){
			a=1;
		}
		if(マス目列[ ( y * 12 ) + x + 2 ] != 0){
			a=1;
		}
	}
	if((ブロックの形==5) * (ブロックの向き==2)){
		if(マス目列[ ( y * 12 ) + x ] != 0){
			a=1;
		}
		if( (y>0) * (マス目列[ ( (y-1) * 12 ) + x] != 0)){
			a=1;
		}
		if(マス目列[ ( (y+1) * 12 ) + x ] != 0){
			a=1;
		}
		if(マス目列[ ( (y+2) * 12 ) + x ] != 0){
			a=1;
		}
	}
	if((ブロックの形==5) * (ブロックの向き==3)){
		if(マス目列[ ( y * 12 ) + x ] != 0){
			a=1;
		}
		if(マス目列[ ( y * 12 ) + x - 1 ] != 0){
			a=1;
		}
		if(マス目列[ ( y * 12 ) + x + 1 ] != 0){
			a=1;
		}
		if(マス目列[ ( y * 12 ) + x - 2 ] != 0){
			a=1;
		}
	}
	if((ブロックの形==5) * (ブロックの向き==4)){
		if(マス目列[ ( y * 12 ) + x ] != 0){
			a=1;
		}
		if( (y>0) * (マス目列[ ( (y-1) * 12 ) + x] != 0)){
			a=1;
		}
		if(マス目列[ ( (y+1) * 12 ) + x ] != 0){
			a=1;
		}
		if( (y>1) * (マス目列[ ( (y-2) * 12 ) + x ] != 0)){
			a=1;
		}
	}
	if((ブロックの形==6) * (ブロックの向き==1)){
		if(マス目列[ ( y * 12 ) + x ] != 0){
			a=1;
		}
		if( (y>0) * (マス目列[ ( (y-1) * 12 ) + x] != 0)){
			a=1;
		}
		if( (y>0) * (マス目列[ ( (y-1) * 12 ) + x + 1] != 0)){
			a=1;
		}
		if(マス目列[ ( y * 12 ) + x - 1] != 0){
			a=1;
		}
	}
	if((ブロックの形==6) * (ブロックの向き==2)){
		if(マス目列[ ( y * 12 ) + x ] != 0){
			a=1;
		}
		if( (y>0) * (マス目列[ ( (y-1) * 12 ) + x] != 0)){
			a=1;
		}
		if( マス目列[ ( y * 12 ) + x + 1] != 0){
			a=1;
		}
		if(マス目列[ ( (y+1) * 12 ) + x + 1] != 0){
			a=1;
		}
	}
	if((ブロックの形==6) * (ブロックの向き==3)){
		if(マス目列[ ( y * 12 ) + x ] != 0){
			a=1;
		}
		if( マス目列[ ( (y+1) * 12 ) + x - 1] != 0){
			a=1;
		}
		if( マス目列[ ( (y+1) * 12 ) + x] != 0){
			a=1;
		}
		if(マス目列[ ( y * 12 ) + x + 1] != 0){
			a=1;
		}
	}
	if((ブロックの形==6) * (ブロックの向き==4)){
		if(マス目列[ ( y * 12 ) + x ] != 0){
			a=1;
		}
		if( マス目列[ ( (y+1) * 12 ) + x] != 0){
			a=1;
		}
		if( マス目列[ ( y * 12 ) + x - 1] != 0){
			a=1;
		}
		if( (y>0) * (マス目列[ ( (y-1) * 12 ) + x - 1] != 0)){
			a=1;
		}
	}
 
	if((ブロックの形==7) * (ブロックの向き==1)){
		if(マス目列[ ( y * 12 ) + x ] != 0){
			a=1;
		}
		if( (y>0) * (マス目列[ ( (y-1) * 12 ) + x - 1] != 0)){
			a=1;
		}
		if( (y>0) * (マス目列[ ( (y-1) * 12 ) + x] != 0)){
			a=1;
		}
		if(マス目列[ ( y * 12 ) + x + 1 ] != 0){
			a=1;
		}
	}
	if((ブロックの形==7) * (ブロックの向き==2)){
		if(マス目列[ ( y * 12 ) + x ] != 0){
			a=1;
		}
		if( (y>0) * (マス目列[ ( (y-1) * 12 ) + x + 1] != 0)){
			a=1;
		}
		if(マス目列[ ( (y+1) * 12 ) + x] != 0){
			a=1;
		}
		if(マス目列[ ( y * 12 ) + x + 1 ] != 0){
			a=1;
		}
	}
	if((ブロックの形==7) * (ブロックの向き==3)){
		if(マス目列[ ( y * 12 ) + x ] != 0){
			a=1;
		}
		if( マス目列[ ( (y+1) * 12 ) + x] != 0){
			a=1;
		}
		if(マス目列[ ( (y+1) * 12 ) + x + 1] != 0){
			a=1;
		}
		if(マス目列[ ( y * 12 ) + x - 1 ] != 0){
			a=1;
		}
	}
	if((ブロックの形==7) * (ブロックの向き==4)){
		if(マス目列[ ( y * 12 ) + x ] != 0){
			a=1;
		}
		if( (y>0) * (マス目列[ ( (y-1) * 12 ) + x] != 0)){
			a=1;
		}
		if(マス目列[ ( (y+1) * 12 ) + x - 1 ] != 0){
			a=1;
		}
		if(マス目列[ ( y * 12 ) + x - 1 ] != 0){
			a=1;
		}
	}
 
	if((ブロックの形==0) * (ブロックの向き==0)){
		a = マス目列[ ( y * 12 ) + x ];
	}
 
	return a;
}
 
 
マス目を詰める( マス目列, x, y , ブロックの形 , ブロックの向き){
	if((ブロックの形==1) * (ブロックの向き==1)){
		マス目列[ ( y * 12 ) + x - 1] = 1;
		マス目列[ ( y * 12 ) + x + 1] = 1;
		マス目列[ ( y * 12 ) + x ] = 1;
		マス目列[ ( (y - 1) * 12 ) + x ] = 1;
	}
	if((ブロックの形==1) * (ブロックの向き==2)){
		マス目列[ ( (y+1) * 12 ) + x] = 1;
		マス目列[ ( y * 12 ) + x + 1] = 1;
		マス目列[ ( y * 12 ) + x ] = 1;
		マス目列[ ( (y - 1) * 12 ) + x ] = 1;
	}
	if((ブロックの形==1) * (ブロックの向き==3)){
		マス目列[ ( y * 12 ) + x - 1] = 1;
		マス目列[ ( y * 12 ) + x + 1] = 1;
		マス目列[ ( y * 12 ) + x ] = 1;
		マス目列[ ( (y + 1) * 12 ) + x ] = 1;
	}
	if((ブロックの形==1) * (ブロックの向き==4)){
		マス目列[ ( y * 12 ) + x - 1] = 1;
		マス目列[ ( (y + 1) * 12 ) + x ] = 1;
		マス目列[ ( y * 12 ) + x ] = 1;
		マス目列[ ( (y - 1) * 12 ) + x ] = 1;
	}
 
	if((ブロックの形==2) * (ブロックの向き==1)){
		マス目列[ ( y * 12 ) + x] = 2;
		マス目列[ ( (y - 1) * 12 ) + x ] = 2;
		マス目列[ ( (y - 1) * 12 ) + x + 1] = 2;
		マス目列[ ( y * 12 ) + x + 1] = 2;
	}
	if((ブロックの形==2) * (ブロックの向き==2)){
		マス目列[ ( y * 12 ) + x] = 2;
		マス目列[ ( (y - 1) * 12 ) + x ] = 2;
		マス目列[ ( (y - 1) * 12 ) + x + 1] = 2;
		マス目列[ ( y * 12 ) + x + 1] = 2;
	}
	if((ブロックの形==2) * (ブロックの向き==3)){
		マス目列[ ( y * 12 ) + x] = 2;
		マス目列[ ( (y - 1) * 12 ) + x ] = 2;
		マス目列[ ( (y - 1) * 12 ) + x + 1] = 2;
		マス目列[ ( y * 12 ) + x + 1] = 2;
	}
	if((ブロックの形==2) * (ブロックの向き==4)){
		マス目列[ ( y * 12 ) + x] = 2;
		マス目列[ ( (y - 1) * 12 ) + x ] = 2;
		マス目列[ ( (y - 1) * 12 ) + x + 1] = 2;
		マス目列[ ( y * 12 ) + x + 1] = 2;
	}
 
	if((ブロックの形==3) * (ブロックの向き==1)){
		マス目列[ ( y * 12 ) + x] = 3;
		マス目列[ ( (y - 1) * 12 ) + x ] = 3;
		マス目列[ ( (y - 1) * 12 ) + x + 1] = 3;
		マス目列[ ( (y + 1) * 12 ) + x ] = 3;
	}
	if((ブロックの形==3) * (ブロックの向き==2)){
		マス目列[ ( y * 12 ) + x] = 3;
		マス目列[ ( y * 12 ) + x - 1] = 3;
		マス目列[ ( y * 12 ) + x + 1] = 3;
		マス目列[ ( (y + 1) * 12 ) + x + 1] = 3;
	}
	if((ブロックの形==3) * (ブロックの向き==3)){
		マス目列[ ( y * 12 ) + x] = 3;
		マス目列[ ( (y - 1) * 12 ) + x ] = 3;
		マス目列[ ( (y + 1) * 12 ) + x - 1] = 3;
		マス目列[ ( (y + 1) * 12 ) + x ] = 3;
	}
	if((ブロックの形==3) * (ブロックの向き==4)){
		マス目列[ ( y * 12 ) + x] = 3;
		マス目列[ ( y * 12 ) + x - 1] = 3;
		マス目列[ ( y * 12 ) + x + 1] = 3;
		マス目列[ ( (y - 1) * 12 ) + x - 1] = 3;
	}
 
	if((ブロックの形==4) * (ブロックの向き==1)){
		マス目列[ ( y * 12 ) + x] = 4;
		マス目列[ ( (y - 1) * 12 ) + x] = 4;
		マス目列[ ( (y + 1) * 12 ) + x] = 4;
		マス目列[ ( (y - 1) * 12 ) + x - 1] = 4;
	}
	if((ブロックの形==4) * (ブロックの向き==2)){
		マス目列[ ( y * 12 ) + x] = 4;
		マス目列[ ( y * 12 ) + x - 1] = 4;
		マス目列[ ( y * 12 ) + x + 1] = 4;
		マス目列[ ( (y - 1) * 12 ) + x + 1] = 4;
	}
	if((ブロックの形==4) * (ブロックの向き==3)){
		マス目列[ ( y * 12 ) + x] = 4;
		マス目列[ ( (y - 1) * 12 ) + x] = 4;
		マス目列[ ( (y + 1) * 12 ) + x] = 4;
		マス目列[ ( (y + 1) * 12 ) + x + 1] = 4;
	}
	if((ブロックの形==4) * (ブロックの向き==4)){
		マス目列[ ( y * 12 ) + x] = 4;
		マス目列[ ( y * 12 ) + x - 1] = 4;
		マス目列[ ( y * 12 ) + x + 1] = 4;
		マス目列[ ( (y + 1) * 12 ) + x - 1] = 4;
	}
 
	if((ブロックの形==5) * (ブロックの向き==1)){
		マス目列[ ( y * 12 ) + x] = 5;
		マス目列[ ( y * 12 ) + x - 1] = 5;
		マス目列[ ( y * 12 ) + x + 1] = 5;
		マス目列[ ( y * 12 ) + x + 2] = 5;
	}
	if((ブロックの形==5) * (ブロックの向き==2)){
		マス目列[ ( y * 12 ) + x] = 5;
		マス目列[ ( (y + 1) * 12 ) + x] = 5;
		マス目列[ ( (y + 2) * 12 ) + x] = 5;
		マス目列[ ( (y - 1) * 12 ) + x] = 5;
	}
	if((ブロックの形==5) * (ブロックの向き==3)){
		マス目列[ ( y * 12 ) + x] = 5;
		マス目列[ ( y * 12 ) + x - 1] = 5;
		マス目列[ ( y * 12 ) + x + 1] = 5;
		マス目列[ ( y * 12 ) + x - 2] = 5;
	}
	if((ブロックの形==5) * (ブロックの向き==4)){
		マス目列[ ( y * 12 ) + x] = 5;
		マス目列[ ( (y + 1) * 12 ) + x] = 5;
		マス目列[ ( (y - 2) * 12 ) + x] = 5;
		マス目列[ ( (y - 1) * 12 ) + x] = 5;
	}
 
	if((ブロックの形==6) * (ブロックの向き==1)){
		マス目列[ ( y * 12 ) + x] = 6;
		マス目列[ ( (y - 1) * 12 ) + x] = 6;
		マス目列[ ( (y - 1) * 12 ) + x + 1] = 6;
		マス目列[ ( y * 12 ) + x - 1] = 6;
	}
	if((ブロックの形==6) * (ブロックの向き==2)){
		マス目列[ ( y * 12 ) + x] = 6;
		マス目列[ ( (y - 1) * 12 ) + x] = 6;
		マス目列[ ( (y + 1) * 12 ) + x + 1] = 6;
		マス目列[ ( y * 12 ) + x + 1] = 6;
	}
	if((ブロックの形==6) * (ブロックの向き==3)){
		マス目列[ ( y * 12 ) + x] = 6;
		マス目列[ ( (y + 1) * 12 ) + x] = 6;
		マス目列[ ( (y + 1) * 12 ) + x - 1] = 6;
		マス目列[ ( y * 12 ) + x + 1] = 6;
	}
	if((ブロックの形==6) * (ブロックの向き==4)){
		マス目列[ ( y * 12 ) + x] = 6;
		マス目列[ ( (y + 1) * 12 ) + x] = 6;
		マス目列[ ( (y - 1) * 12 ) + x - 1] = 6;
		マス目列[ ( y * 12 ) + x - 1] = 6;
	}
 
	if((ブロックの形==7) * (ブロックの向き==1)){
		マス目列[ ( y * 12 ) + x] = 7;
		マス目列[ ( (y - 1) * 12 ) + x] = 7;
		マス目列[ ( (y - 1) * 12 ) + x - 1] = 7;
		マス目列[ ( y * 12 ) + x + 1] = 7;
	}
	if((ブロックの形==7) * (ブロックの向き==2)){
		マス目列[ ( y * 12 ) + x] = 7;
		マス目列[ ( (y + 1) * 12 ) + x] = 7;
		マス目列[ ( (y - 1) * 12 ) + x + 1] = 7;
		マス目列[ ( y * 12 ) + x + 1] = 7;
	}
	if((ブロックの形==7) * (ブロックの向き==3)){
		マス目列[ ( y * 12 ) + x] = 7;
		マス目列[ ( (y + 1) * 12 ) + x] = 7;
		マス目列[ ( (y + 1) * 12 ) + x + 1] = 7;
		マス目列[ ( y * 12 ) + x - 1] = 7;
	}
	if((ブロックの形==7) * (ブロックの向き==4)){
		マス目列[ ( y * 12 ) + x] = 7;
		マス目列[ ( (y - 1) * 12 ) + x] = 7;
		マス目列[ ( (y + 1) * 12 ) + x - 1] = 7;
		マス目列[ ( y * 12 ) + x - 1] = 7;
	}
}
 
マス目を消す( マス目列, x, y ){
	マス目列[ ( y * 12 ) + x ] = 0;
}
 
消す(マス目列){
	y = 0;
	while ( y < 20 ){
		スイッチ= 1;
		x = 1;
		while ( x < 11 ){
			if ( マス目を得る( マス目列, x, y , 0 , 0 ) == 0 ){
				スイッチ= 0;
			}
			x = x + 1;
		}
		if ( スイッチ== 1 ){
			x = 1;
			while ( x < 11 ){
				マス目を消す( マス目列, x, y );
				x = x + 1;
			}
			段下げ(マス目列,y);
		}
		y = y + 1;
	}
}
 
段下げ(マス目列,y){
	while(y>0){
		x=1;
		while(x<11){
			マス目列[(y*12)+x]=マス目列[((y-1)*12)+x];
			x=x+1;
		}
		y=y-1;
	}
}